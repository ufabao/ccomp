use crate::ast::{
    BinaryOp,
    Block, 
    BlockItem,
    Declaration,
    Expression,
    ForInit,
    FunctionDecl,
    Program,
    Statement,
    StorageClass,
    Type,
    UnaryOp,
    VariableDecl,
};
use std::str::FromStr;

grammar;

pub Program: Program = {
    <d: Declaration+> => Program::Program(d),
};

Declaration: Declaration = {
  <v : VariableDeclaration> => Declaration::VarDeclaration(v),
  <f : FunctionDeclaration> => Declaration::FuncDeclaration(f),
}

VariableDeclaration : VariableDecl = {
  <s: Specifier?> <t: TypeName> <name : ID> "=" <e : Exp> ";" => VariableDecl { name: name, value: Some(e), storage: s},
  <s: Specifier?> <t: TypeName> <name: ID> ";" => VariableDecl {name: name, value: None, storage: s},
}

FunctionDeclaration : FunctionDecl = {
  <s: Specifier?> <t: TypeName> <name : ID> "(" <params : ParamList> ")" <body : Block> => {
    let mut types = Vec<Type>::new();
    let mut ids = Vec<String>::new();
    for (typ, nam) in &params {
      types.push(typ);
      ids.push(nam);
    }
    let funtype = Type::FunType(types, t);
    FunctionDecl{ name, ids, body: Some(body), typ: funtype, storage: s}
  },
  <s: Specifier?> <t: TypeName> <name : ID> "(" <params: ParamList> ")" ";" => {
    let mut types = Vec<Type>::new();
    let mut ids = Vec<String>::new();
    for (typ, nam) in &params {
      types.push(typ);
      ids.push(nam);
    }
    let funtype = Type::FunType(types, t);
    FunctionDecl{ name, params: ids, body: None, typ: funtype, storage: s}
  }
}

ParamList : Vec<(Type, String)> = {
  "void" => Vec::new(),
  <t: TypeName> <name : ID> => vec![(t, name)],
  <mut pl : ParamList> "," <t: TypeName> <name : ID> => {
    pl.push((t, name));
    pl
  },
}

Specifier : StorageClass = {
  "static" => StorageClass::Static,
  "extern" => StorageClass::Extern,
}

TypeName : Type = {
  "int" => Type::Int,
  "long" => Type::Long,
}

ArgList : Vec<Expression> = {
  "void" => Vec::new(),
  <e : Exp> => vec![e],
  <mut arglist : ArgList> "," <e: Exp> => {
    arglist.push(e);
    arglist
  },
}

ID: String = {
    <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => s.to_owned(),
}


Block: Block = {
  "{" <b : BlockItems> "}" => Block{ items: b },
}

BlockItems: Vec<BlockItem> = {
  <b: BlockItem> => vec![b],
  <mut v: BlockItems> <b: BlockItem> => {
    v.push(b);
    v
  }
}

BlockItem: BlockItem = {
  <s: Statement> => BlockItem::Statement(<>),
  <d: Declaration> => BlockItem::Declaration(<>),
}

ForInit: ForInit = {
  <v : VariableDeclaration> => ForInit::Declaration(v),
  //<e: Exp?> => ForInit::Expression(e),
}


Statement: Statement = {
    #[precedence(level="0")]
    "return" <e: Exp> ";" => Statement::Return(e),
    <e: Exp> ";" => Statement::Expression(e),
    <b: Block> => Statement::Compound(b),
    #[precedence(level="5")]
    "if" "(" <e1 : Exp> ")" <s1 : Statement> "else" <s2 : Statement> => Statement::If(e1, Box::new(s1), Some(Box::new(s2))),
    #[precedence(level="10")]
    "if" "(" <e1 : Exp> ")" <s : Statement> => Statement::If(e1, Box::new(s), None),
    "while" "(" <e: Exp> ")" <s: Statement> => Statement::While(e, Box::new(s), String::new()),
    "for" "(" <init: ForInit> <e1: Exp?> ";" <e2 : Exp?> ")" <s: Statement> => Statement::For(init, e1, e2, Box::new(s), String::new()),
    "break" ";" => Statement::Break(String::new()),
    "continue" ";" => Statement::Continue(String::new()),

    #[precedence(level="20")]
    ";" => Statement::Null,
};


Exp: Expression = {
    #[precedence(level="0")]
    Factor,

    #[precedence(level="110")]
    #[assoc(side="right")]
    <e1: Exp> "=" <e2: Exp> => Expression::Assignment(Box::new(e1), Box::new(e2)),

    #[precedence(level="100")]
    #[assoc(side="right")]
    <e1 : Exp> "?" <e2 : Exp> ":" <e3 : Exp> => Expression::Conditional(Box::new(e1), Box::new(e2), Box::new(e3)),
    
    #[precedence(level="95")]
    #[assoc(side="left")]
    <e1: Exp> "||" <e2:Exp> => Expression::Binary(BinaryOp::Or, Box::new(e1), Box::new(e2)),
    
    #[precedence(level="90")]
    #[assoc(side="left")]
    <e1: Exp> "&&" <e2:Exp> => Expression::Binary(BinaryOp::And, Box::new(e1), Box::new(e2)),
    
    #[precedence(level="70")]
    #[assoc(side="left")]
    <e1: Exp> "==" <e2:Exp> => Expression::Binary(BinaryOp::Equal, Box::new(e1), Box::new(e2)),
    <e1: Exp> "!=" <e2:Exp> => Expression::Binary(BinaryOp::NotEqual, Box::new(e1), Box::new(e2)),
    
    #[precedence(level="65")]
    #[assoc(side="left")]
    <e1: Exp> "<" <e2:Exp> => Expression::Binary(BinaryOp::LessThan, Box::new(e1), Box::new(e2)),
    <e1: Exp> "<=" <e2:Exp> => Expression::Binary(BinaryOp::LessOrEqual, Box::new(e1), Box::new(e2)),
    <e1: Exp> ">" <e2:Exp> => Expression::Binary(BinaryOp::GreaterThan, Box::new(e1), Box::new(e2)),
    <e1: Exp> ">=" <e2:Exp> => Expression::Binary(BinaryOp::GreaterOrEqual, Box::new(e1), Box::new(e2)),
    
    #[precedence(level="55")]
    #[assoc(side="left")]
    <e1:Exp> "+" <e2:Exp> => Expression::Binary(BinaryOp::Add, Box::new(e1), Box::new(e2)),
    <e1:Exp> "-" <e2:Exp> => Expression::Binary(BinaryOp::Sub, Box::new(e1), Box::new(e2)),
    
    #[precedence(level="50")]
    #[assoc(side="left")]
    <e1:Exp> "*" <e2:Exp> => Expression::Binary(BinaryOp::Mul, Box::new(e1), Box::new(e2)),
    <e1:Exp> "/" <e2:Exp> => Expression::Binary(BinaryOp::Div, Box::new(e1), Box::new(e2)),
    <e1:Exp> "%" <e2:Exp> => Expression::Binary(BinaryOp::Mod, Box::new(e1), Box::new(e2)),
};

Factor: Expression = {
    r"[0-9]+" => Expression::Const(Const::Int(i32::from_str(<>).unwrap())),
    r"[0-9]+L" => Expression::Const(Const::Long(i64::from_str(<>.unwrap()))),
    "(" <t: TypeName> ")" <f: Factor> => Expression::Cast(t, f),
    <name: ID> => Expression::Var(name),
    "-" <e: Factor> => Expression::Unary(UnaryOp::Neg, Box::new(e)),
    "~" <e: Factor> => Expression::Unary(UnaryOp::Complement, Box::new(e)),
    "!" <e: Factor> => Expression::Unary(UnaryOp::Not, Box::new(e)),
    "(" <e: Exp> ")" => e,
    <name: ID> "(" <args: ArgList> ")" => Expression::FunctionCall(name, args),
    <name: ID> "(" ")" => Expression::FunctionCall(name, Vec::new()),
};

